CFLAGS=									\
	-Wall								\
	-Wextra								\
	-Wpedantic							\
	-std=c89							\
	-march=native						\
	-mshstk								\
	-Wno-overlength-strings				\
	-Wint-conversion					\
	-Wimplicit-fallthrough				\
	-Wshadow							\
	-Walloc-zero						\
	-Wcast-qual							\
	-Wconversion						\
	-Wdouble-promotion					\
	-Wduplicated-branches				\
	-Wduplicated-cond					\
	-Wfloat-equal						\
	-Wformat=2							\
	-Wformat-signedness					\
	-Winit-self							\
	-Wlogical-op						\
	-Wstrict-prototypes					\
	-Wswitch-default					\
	-Wswitch-enum						\
	-Wundef								\
	-Wunused-macros						\
	-Wwrite-strings						\
	-Waggregate-return					\
	-Wcast-align						\
	-Wunreachable-code					\
	-Wpointer-arith						\
	-Wnull-dereference					\
	-Og									\
	-ggdb								\
	-fanalyzer							\
	-fcf-protection=full				\
	-fstack-protector-all				\
	-fstack-check						\
	-fsanitize-address-use-after-scope	\
	-ftrapv								\
	-fsanitize=address,undefined

TRASH= $(shell if which trash 2>/dev/null 1>&2; then echo trash; else echo rm; fi)

all: run

run: example
	./example

example: autogenerated.c
	cc $(CFLAGS) example.c -o example

autogenerated.c: stage_1
	./stage_1

stage_1: example.c core.h Makefile
	cc $(CFLAGS) -DSTAGE_1 example.c -o stage_1

clean:
	if [ -e example ];          then $(TRASH) example;       	fi
	if [ -e autogenerated.c ];  then $(TRASH) autogenerated.c;	fi
	if [ -e autogenerated.o ];  then $(TRASH) autogenerated.o;	fi
	if [ -e build ];            then $(TRASH) build;        	fi
	if [ -e stage_1 ];          then $(TRASH) stage_1;        	fi
